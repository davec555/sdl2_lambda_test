#include <SDL2/SDL.h>

#include <GL/gl.h>
#include <GL/glu.h>

//#include <functional>
#include <iostream>
#include <bitset>
#include <vector>

#include "config.h"

using namespace std;
using bin = std::bitset<16>;

SDL_Window *window;
SDL_GLContext glContext;


const int width = 640;
const int height = 480;
//typedef void (*funcPtr)(struct keyboard_func kb);
typedef struct func{
	void (*funcPtr)(struct keyboard_func kb);
	string desc;
} func;

struct keyboard_func
{
   string funcID; //unique id for keyboard callable function
   string desc; // Simple description of function
   string key; // key bound to function

   SDL_KeyCode sym; // sdl2 symbol
   vector<SDL_Keymod> modifierVector;
   SDL_Keymod modifier;
   vector<SDL_Keymod> ignoreModifierVector;
   SDL_Keymod ignoreModifier;
   void (*func_ptr)(struct keyboard_func kb) {};
};

void drawCube(float xrf, float yrf, float zrf);


void init(){

	if ( SDL_Init(SDL_INIT_VIDEO) < 0 ){ 
	 	cout << "Unable to init SDL, error: " << SDL_GetError() << endl;
	 	exit(1);
	} 

	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
	SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 5);
	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 6);
	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 5);

	window = SDL_CreateWindow("Cube", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL);
	
	glContext = SDL_GL_CreateContext(window);
	
	if(window == NULL){
		exit(1);
	}

	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glClearDepth(1.0);
	glDepthFunc(GL_LESS);
	glEnable(GL_DEPTH_TEST);
	glShadeModel(GL_SMOOTH);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(45.0f, (float) width / (float) height, 0.1f, 100.0f);
	glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char *argv[], char* envp[]){   

	init();
	int myIterator = 0;
	int match = 0;
	

	map<string, func> functionMap = {
		{"rotatenegy",{[](struct keyboard_func kb) {
			cout << kb.desc << endl;
		},"Rotate -Y"}},
		{"rotateposy",{[](struct keyboard_func kb) {
			cout << kb.desc << endl;
		},"Rotate +Y"}},
		{"rotatenegx",{[](struct keyboard_func kb) {
			cout << kb.desc << endl;
		},"Rotate -X"}},
		{"rotateposx",{[](struct keyboard_func kb) {
			cout << kb.desc << endl;
		},"Rotate +X"}},		
		{"rotatenegz",{[](struct keyboard_func kb) {
			cout << kb.desc << endl;
		},"Rotate -Z"}},
		{"rotateposz",{[](struct keyboard_func kb) {
			cout << kb.desc << endl;
		},"Rotate +Z"}},
		{"togglebgcol",{[](struct keyboard_func kb) {
			cout << kb.desc << endl;
		},"Toggle background colour between black/blue"}},
		{"nothing",{[](struct keyboard_func kb) {
			cout << "function not found (" << kb.desc << ") - doing nothing " << endl;
		},"no function exists"}}
	};

	map<string, SDL_KeyCode> keyAliasMap ={
		{"Enter",SDLK_RETURN},
		{"<",SDLK_COMMA},
		{">",SDLK_PERIOD}
	};

	map<string, SDL_Keymod> keyModAliasMap = {
		{"NumLock",KMOD_NUM},
		{"Shift",KMOD_SHIFT},
		{"CapsLock",KMOD_CAPS},
		{"None",KMOD_NONE},
		{"Alt",KMOD_ALT},
		{"Ctrl",KMOD_CTRL}
	};

	int numFuncs = functionMap.size();
	keyboard_func keys[numFuncs] = {};
	// read config file with environment variable expansion support
	Config config("displwo.config", envp);

	map<string, Config*> groups = config.getGroups(); // all groups
	const string qualifierPrefix = "qualifier"; // lowercase prefix for group name
	const string ignoredQualifierPrefix = "ignoredqualifier"; // lowercase prefix for group name
	for (map<string, Config*>::iterator i = groups.begin(); i != groups.end(); ++i) {
		short qualifierHeading = 0;
		short ignoredQualifierHeading = 0;
		string groupName = i->first;
		Config* group = i->second;

		if(functionMap.find(group->pString("function")) != functionMap.end()){
			//cout << "function found(" << (group->pString("function")) <<")" << endl;
			keys[myIterator].func_ptr = (functionMap[group->pString("function")]).funcPtr;
			//cout << "functionMap.desc: " << ((functionMap[group->pString("function")]).desc) << endl;
			keys[myIterator].desc = (functionMap[group->pString("function")]).desc;
		} else {
			//cout << "function not found (" << (group->pString("function")) <<")" << endl;
			keys[myIterator].func_ptr = (functionMap["nothing"]).funcPtr;
			//cout << "functionMap.desc: " << ((functionMap[group->pString("function")]).desc) << endl;
			keys[myIterator].desc = "No description for " + (group->pString("function")) + ". Unknown function";
		}
		//cout << "myIterator: " << myIterator << endl;
		cout << group->pString("function") << ":" << endl;
		cout << "   Desc: " << keys[myIterator].desc << endl;
		cout << "   Key : " << group->pString("key") << endl;
		keys[myIterator].funcID = group->pString("function");
		if(keyAliasMap.find(group->pString("key")) != keyAliasMap.end()){
			keys[myIterator].sym = keyAliasMap[group->pString("key")];
			keys[myIterator].key = SDL_GetKeyName(keys[myIterator].sym);
			cout << "   Alias: " << SDL_GetKeyName(keys[myIterator].sym) << endl;	
		} else {
			keys[myIterator].key = group->pString("key");	
		}
		
		map<string, Config*> subGroups = group->getGroups();
		for (map<string, Config*>::iterator j = subGroups.begin(); j != subGroups.end(); ++j) {
               		string subGroupName = j->first;
               		Config* subGroup = j->second;

			if(subGroup->pString("singlequalifier") != ""){
				if(subGroup->pString("singlequalifier") != "none"){
					if((subGroupName.substr(0,qualifierPrefix.length()) == qualifierPrefix) && qualifierHeading == 0) {
						cout << "   " << qualifierPrefix << ":" << endl;
						qualifierHeading = 1;
					}
					cout << "      " << subGroup->pString("singlequalifier") << endl;
					if(keyModAliasMap.find(subGroup->pString("singlequalifier")) != keyModAliasMap.end()){
						keys[myIterator].modifier = (SDL_Keymod)(keys[myIterator].modifier | (keyModAliasMap[subGroup->pString("singlequalifier")]));
						keys[myIterator].modifierVector.push_back((keyModAliasMap[subGroup->pString("singlequalifier")]));
						//cout << " -- " << (subGroup->pString("singlequalifier")) << " aliased to " << (keyModAliasMap[subGroup->pString("singlequalifier")]) << endl;
					} else {
						cout << "    **" << (subGroup->pString("singlequalifier")) << " not found in keyModAliasMap" << endl;
					}
				}
			}
			if(subGroup->pString("singleignoredqualifier") != ""){
				if((subGroupName.substr(0,ignoredQualifierPrefix.length()) == ignoredQualifierPrefix) && ignoredQualifierHeading == 0) {
					cout << "   " << ignoredQualifierPrefix << ":" << endl;
					ignoredQualifierHeading = 1;
				}
			  	cout << "      " << subGroup->pString("singleignoredqualifier") << endl;
				//keys[myIterator].ignoreModifier = (SDL_Keymod)(keys[myIterator].ignoreModifier | KMOD_CTRL);
				if(keyModAliasMap.find(subGroup->pString("singleignoredqualifier")) != keyModAliasMap.end()){
					keys[myIterator].ignoreModifier = (SDL_Keymod)(keys[myIterator].ignoreModifier | (keyModAliasMap[subGroup->pString("singleignoredqualifier")]));
					keys[myIterator].ignoreModifierVector.push_back((keyModAliasMap[subGroup->pString("singleignoredqualifier")]));
					//cout << " -- " << (subGroup->pString("singleignoredqualifier")) << " aliased to " << (keyModAliasMap[subGroup->pString("singleignoredqualifier")]) << endl;
				} else {
					cout << "    **" << (subGroup->pString("singleignoredqualifier")) << " not found in keyModAliasMap" << endl;
				}
			}
		}
		//cout << "  Quals: " << keys[myIterator].modifier << endl;
		myIterator++;
	}

	bool running = true;

	float xrf = 0, yrf = 0, zrf = 0;

	while(running){ 
	  
		SDL_Event event;
	  
		while ( SDL_PollEvent(&event) ){
			switch(event.type){
				case SDL_QUIT:
					running = false;
				break;

				case SDL_KEYDOWN:
					//cout << "Keyname: " << SDL_GetKeyName(event.key.keysym.sym) << endl;
					//cout << "Scancode: " << SDL_GetScancodeName(event.key.keysym.scancode) << endl;
					//cout << "KMOD_SHIFT: " << KMOD_SHIFT << endl;
					//cout << "Modifier: " << event.key.keysym.mod << ": " << (event.key.keysym.mod & KMOD_SHIFT) << ": " << (event.key.keysym.mod & KMOD_NONE) << endl;
					switch(event.key.keysym.sym){
						case SDLK_ESCAPE:
							running = false;
						break;
						default:
							for(int i=0; i < numFuncs; i++){
							  //if(strcmp(SDL_GetKeyName(event.key.keysym.sym) ,keys[i].key) == 0){
								if(SDL_GetKeyName(event.key.keysym.sym) == keys[i].key){
									/*cout << "event.key.keysm.mod: " << bin(event.key.keysym.mod) << endl;
									cout << "modifier: " << bin(keys[i].modifier) << endl;
									cout << "and: " << bin((event.key.keysym.mod & keys[i].modifier)) << endl;
									cout << "nand: " << bin(!(event.key.keysym.mod & (event.key.keysym.mod &keys[i].modifier))) << endl;
									cout << "xor: " << bin(event.key.keysym.mod xor (event.key.keysym.mod & keys[i].modifier)) << endl;
									cout << "ignoreModifier: " << bin( keys[i].ignoreModifier) << endl;
									*/
									if(((event.key.keysym.mod xor (event.key.keysym.mod & keys[i].modifier))-(event.key.keysym.mod & keys[i].ignoreModifier)) == 0){
										//if((event.key.keysym.mod & keys[i].modifier) || keys[i].modifier == KMOD_NONE)
										if(keys[i].modifier == KMOD_NONE){
											keys[i].func_ptr(keys[i]);
										} else {
											for (auto& v : keys[i].modifierVector){
												if(event.key.keysym.mod & v)
													match++;
											}
											if(match == (int)keys[i].modifierVector.size())
												keys[i].func_ptr(keys[i]);
											match = 0;
										}
									}
								}
							}
						break;
					}
				break;
			} 
		}

		xrf -= 0.5; 
		yrf -= 0.5;
		zrf -= 0.5;

		drawCube(xrf, yrf, zrf);

		glFlush();
		SDL_GL_SwapWindow(window);
	}

	//Destroy context
	SDL_GL_DeleteContext( glContext );
	glContext = NULL;	

	//Destroy window	
	SDL_DestroyWindow( window );
	window = NULL;
	
	SDL_Quit();
	return 0;
}

void drawCube(float xrf, float yrf, float zrf){
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	
	glLoadIdentity();
	glTranslatef(0.0f, 0.0f, -7.0f);
	
	glRotatef(xrf, 1.0f, 0.0f, 0.0f);
	glRotatef(yrf, 0.0f, 1.0f, 0.0f);
	glRotatef(zrf, 0.0f, 0.0f, 1.0f);
	
	glBegin(GL_QUADS);

	glColor3f(0.0f, 1.0f, 0.0f);
	glVertex3f( 1.0f, 1.0f, -1.0f);
	glVertex3f(-1.0f, 1.0f, -1.0f);
	glVertex3f(-1.0f, 1.0f,  1.0f);
	glVertex3f( 1.0f, 1.0f,  1.0f);
	
	glColor3f(1.0f, 0.5f, 0.0f);
	glVertex3f( 1.0f, -1.0f,  1.0f);
	glVertex3f(-1.0f, -1.0f,  1.0f);
	glVertex3f(-1.0f, -1.0f, -1.0f);
	glVertex3f( 1.0f, -1.0f, -1.0f);
	
	glColor3f(1.0f, 0.0f, 0.0f);
	glVertex3f( 1.0f,  1.0f, 1.0f);
	glVertex3f(-1.0f,  1.0f, 1.0f);
	glVertex3f(-1.0f, -1.0f, 1.0f);
	glVertex3f( 1.0f, -1.0f, 1.0f);

	glColor3f(1.0f,1.0f,0.0f);
	glVertex3f( 1.0f, -1.0f, -1.0f);
	glVertex3f(-1.0f, -1.0f, -1.0f);
	glVertex3f(-1.0f,  1.0f, -1.0f);
	glVertex3f( 1.0f,  1.0f, -1.0f);

	glColor3f(0.0f,0.0f,1.0f);
	glVertex3f(-1.0f,  1.0f,  1.0f);
	glVertex3f(-1.0f,  1.0f, -1.0f);
	glVertex3f(-1.0f, -1.0f, -1.0f);
	glVertex3f(-1.0f, -1.0f,  1.0f);
	
	glColor3f(1.0f,0.0f,1.0f);
	glVertex3f( 1.0f,  1.0f, -1.0f);
	glVertex3f( 1.0f,  1.0f,  1.0f);
	glVertex3f( 1.0f, -1.0f,  1.0f);
	glVertex3f( 1.0f, -1.0f, -1.0f);

	glEnd();  

}
